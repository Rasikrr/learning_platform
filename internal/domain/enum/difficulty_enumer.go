// Code generated by "enumer -type=Difficulty -json -trimprefix Difficulty -transform=lower -output difficulty_enumer.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DifficultyName = "easymediumhard"

var _DifficultyIndex = [...]uint8{0, 4, 10, 14}

const _DifficultyLowerName = "easymediumhard"

func (i Difficulty) String() string {
	if i >= Difficulty(len(_DifficultyIndex)-1) {
		return fmt.Sprintf("Difficulty(%d)", i)
	}
	return _DifficultyName[_DifficultyIndex[i]:_DifficultyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DifficultyNoOp() {
	var x [1]struct{}
	_ = x[DifficultyEasy-(0)]
	_ = x[DifficultyMedium-(1)]
	_ = x[DifficultyHard-(2)]
}

var _DifficultyValues = []Difficulty{DifficultyEasy, DifficultyMedium, DifficultyHard}

var _DifficultyNameToValueMap = map[string]Difficulty{
	_DifficultyName[0:4]:        DifficultyEasy,
	_DifficultyLowerName[0:4]:   DifficultyEasy,
	_DifficultyName[4:10]:       DifficultyMedium,
	_DifficultyLowerName[4:10]:  DifficultyMedium,
	_DifficultyName[10:14]:      DifficultyHard,
	_DifficultyLowerName[10:14]: DifficultyHard,
}

var _DifficultyNames = []string{
	_DifficultyName[0:4],
	_DifficultyName[4:10],
	_DifficultyName[10:14],
}

// DifficultyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DifficultyString(s string) (Difficulty, error) {
	if val, ok := _DifficultyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DifficultyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Difficulty values", s)
}

// DifficultyValues returns all values of the enum
func DifficultyValues() []Difficulty {
	return _DifficultyValues
}

// DifficultyStrings returns a slice of all String values of the enum
func DifficultyStrings() []string {
	strs := make([]string, len(_DifficultyNames))
	copy(strs, _DifficultyNames)
	return strs
}

// IsADifficulty returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Difficulty) IsADifficulty() bool {
	for _, v := range _DifficultyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Difficulty
func (i Difficulty) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Difficulty
func (i *Difficulty) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Difficulty should be a string, got %s", data)
	}

	var err error
	*i, err = DifficultyString(s)
	return err
}
