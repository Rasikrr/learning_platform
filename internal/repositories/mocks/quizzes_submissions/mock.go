// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckIsPassed mocks base method.
func (m *MockRepository) CheckIsPassed(ctx context.Context, userID, topicID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsPassed", ctx, userID, topicID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsPassed indicates an expected call of CheckIsPassed.
func (mr *MockRepositoryMockRecorder) CheckIsPassed(ctx, userID, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsPassed", reflect.TypeOf((*MockRepository)(nil).CheckIsPassed), ctx, userID, topicID)
}

// UpdatePassed mocks base method.
func (m *MockRepository) UpdatePassed(ctx context.Context, userID, courseID, topicID string, passed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassed", ctx, userID, courseID, topicID, passed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassed indicates an expected call of UpdatePassed.
func (mr *MockRepositoryMockRecorder) UpdatePassed(ctx, userID, courseID, topicID, passed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassed", reflect.TypeOf((*MockRepository)(nil).UpdatePassed), ctx, userID, courseID, topicID, passed)
}
