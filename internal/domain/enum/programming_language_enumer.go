// Code generated by "enumer -type=ProgrammingLanguage -json -trimprefix ProgrammingLanguage -transform=snake -output programming_language_enumer.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ProgrammingLanguageName = "gopython3javarubysqlnodejsrust"

var _ProgrammingLanguageIndex = [...]uint8{0, 2, 9, 13, 17, 20, 26, 30}

const _ProgrammingLanguageLowerName = "gopython3javarubysqlnodejsrust"

func (i ProgrammingLanguage) String() string {
	if i >= ProgrammingLanguage(len(_ProgrammingLanguageIndex)-1) {
		return fmt.Sprintf("ProgrammingLanguage(%d)", i)
	}
	return _ProgrammingLanguageName[_ProgrammingLanguageIndex[i]:_ProgrammingLanguageIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ProgrammingLanguageNoOp() {
	var x [1]struct{}
	_ = x[ProgrammingLanguageGo-(0)]
	_ = x[ProgrammingLanguagePython3-(1)]
	_ = x[ProgrammingLanguageJava-(2)]
	_ = x[ProgrammingLanguageRuby-(3)]
	_ = x[ProgrammingLanguageSQL-(4)]
	_ = x[ProgrammingLanguageNodejs-(5)]
	_ = x[ProgrammingLanguageRust-(6)]
}

var _ProgrammingLanguageValues = []ProgrammingLanguage{ProgrammingLanguageGo, ProgrammingLanguagePython3, ProgrammingLanguageJava, ProgrammingLanguageRuby, ProgrammingLanguageSQL, ProgrammingLanguageNodejs, ProgrammingLanguageRust}

var _ProgrammingLanguageNameToValueMap = map[string]ProgrammingLanguage{
	_ProgrammingLanguageName[0:2]:        ProgrammingLanguageGo,
	_ProgrammingLanguageLowerName[0:2]:   ProgrammingLanguageGo,
	_ProgrammingLanguageName[2:9]:        ProgrammingLanguagePython3,
	_ProgrammingLanguageLowerName[2:9]:   ProgrammingLanguagePython3,
	_ProgrammingLanguageName[9:13]:       ProgrammingLanguageJava,
	_ProgrammingLanguageLowerName[9:13]:  ProgrammingLanguageJava,
	_ProgrammingLanguageName[13:17]:      ProgrammingLanguageRuby,
	_ProgrammingLanguageLowerName[13:17]: ProgrammingLanguageRuby,
	_ProgrammingLanguageName[17:20]:      ProgrammingLanguageSQL,
	_ProgrammingLanguageLowerName[17:20]: ProgrammingLanguageSQL,
	_ProgrammingLanguageName[20:26]:      ProgrammingLanguageNodejs,
	_ProgrammingLanguageLowerName[20:26]: ProgrammingLanguageNodejs,
	_ProgrammingLanguageName[26:30]:      ProgrammingLanguageRust,
	_ProgrammingLanguageLowerName[26:30]: ProgrammingLanguageRust,
}

var _ProgrammingLanguageNames = []string{
	_ProgrammingLanguageName[0:2],
	_ProgrammingLanguageName[2:9],
	_ProgrammingLanguageName[9:13],
	_ProgrammingLanguageName[13:17],
	_ProgrammingLanguageName[17:20],
	_ProgrammingLanguageName[20:26],
	_ProgrammingLanguageName[26:30],
}

// ProgrammingLanguageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProgrammingLanguageString(s string) (ProgrammingLanguage, error) {
	if val, ok := _ProgrammingLanguageNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ProgrammingLanguageNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProgrammingLanguage values", s)
}

// ProgrammingLanguageValues returns all values of the enum
func ProgrammingLanguageValues() []ProgrammingLanguage {
	return _ProgrammingLanguageValues
}

// ProgrammingLanguageStrings returns a slice of all String values of the enum
func ProgrammingLanguageStrings() []string {
	strs := make([]string, len(_ProgrammingLanguageNames))
	copy(strs, _ProgrammingLanguageNames)
	return strs
}

// IsAProgrammingLanguage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProgrammingLanguage) IsAProgrammingLanguage() bool {
	for _, v := range _ProgrammingLanguageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ProgrammingLanguage
func (i ProgrammingLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProgrammingLanguage
func (i *ProgrammingLanguage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ProgrammingLanguage should be a string, got %s", data)
	}

	var err error
	*i, err = ProgrammingLanguageString(s)
	return err
}
