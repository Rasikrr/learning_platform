// Code generated by "enumer -type=CourseProgress -json -trimprefix CourseProgress -transform=snake -output course_progress_enumer.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CourseProgressName = "in_progresscompleted"

var _CourseProgressIndex = [...]uint8{0, 11, 20}

const _CourseProgressLowerName = "in_progresscompleted"

func (i CourseProgress) String() string {
	if i >= CourseProgress(len(_CourseProgressIndex)-1) {
		return fmt.Sprintf("CourseProgress(%d)", i)
	}
	return _CourseProgressName[_CourseProgressIndex[i]:_CourseProgressIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CourseProgressNoOp() {
	var x [1]struct{}
	_ = x[CourseProgressInProgress-(0)]
	_ = x[CourseProgressCompleted-(1)]
}

var _CourseProgressValues = []CourseProgress{CourseProgressInProgress, CourseProgressCompleted}

var _CourseProgressNameToValueMap = map[string]CourseProgress{
	_CourseProgressName[0:11]:       CourseProgressInProgress,
	_CourseProgressLowerName[0:11]:  CourseProgressInProgress,
	_CourseProgressName[11:20]:      CourseProgressCompleted,
	_CourseProgressLowerName[11:20]: CourseProgressCompleted,
}

var _CourseProgressNames = []string{
	_CourseProgressName[0:11],
	_CourseProgressName[11:20],
}

// CourseProgressString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CourseProgressString(s string) (CourseProgress, error) {
	if val, ok := _CourseProgressNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CourseProgressNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CourseProgress values", s)
}

// CourseProgressValues returns all values of the enum
func CourseProgressValues() []CourseProgress {
	return _CourseProgressValues
}

// CourseProgressStrings returns a slice of all String values of the enum
func CourseProgressStrings() []string {
	strs := make([]string, len(_CourseProgressNames))
	copy(strs, _CourseProgressNames)
	return strs
}

// IsACourseProgress returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CourseProgress) IsACourseProgress() bool {
	for _, v := range _CourseProgressValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CourseProgress
func (i CourseProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CourseProgress
func (i *CourseProgress) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CourseProgress should be a string, got %s", data)
	}

	var err error
	*i, err = CourseProgressString(s)
	return err
}
