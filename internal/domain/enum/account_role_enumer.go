// Code generated by "enumer -type=AccountRole -json -trimprefix AccountRole -transform=snake -output account_role_enumer.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

const _AccountRoleName = "adminuser"

var _AccountRoleIndex = [...]uint8{0, 5, 9}

func (i AccountRole) String() string {
	if i >= AccountRole(len(_AccountRoleIndex)-1) {
		return fmt.Sprintf("AccountRole(%d)", i)
	}
	return _AccountRoleName[_AccountRoleIndex[i]:_AccountRoleIndex[i+1]]
}

var _AccountRoleValues = []AccountRole{0, 1}

var _AccountRoleNameToValueMap = map[string]AccountRole{
	_AccountRoleName[0:5]: 0,
	_AccountRoleName[5:9]: 1,
}

// AccountRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccountRoleString(s string) (AccountRole, error) {
	if val, ok := _AccountRoleNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccountRole values", s)
}

// AccountRoleValues returns all values of the enum
func AccountRoleValues() []AccountRole {
	return _AccountRoleValues
}

// IsAAccountRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccountRole) IsAAccountRole() bool {
	for _, v := range _AccountRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccountRole
func (i AccountRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountRole
func (i *AccountRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccountRole should be a string, got %s", data)
	}

	var err error
	*i, err = AccountRoleString(s)
	return err
}
